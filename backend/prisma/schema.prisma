// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  password      String
  role          String?
  token         String?
  tokenExpire   DateTime?
  createdAt     DateTime  @default(now())
  profileText   String?
  profileImage  String?
  profileBanner String?
  posts         Int       @default(0)
  follows       Int       @default(0)

  post               Post[]    @relation("user_posts")
  comments           Comment[] @relation("user_comments")
  chats_participant1 Chat[]    @relation("chats_user1")
  chats_participant2 Chat[]    @relation("chats_user2")

  followsAsFollower     Follow[]  @relation("follower")
  followsAsFollowedUser Follow[]  @relation("followedUser")
  Message               Message[]
  topic Topic [] @relation("user_topics")

}

model Post {
  post_id    Int      @id @default(autoincrement())
  user_id    Int
  topic_id   Int
  title      String
  content    String
  image      String?
  created_at DateTime @default(now())
  upvotes    Int      @default(0)
  downvotes  Int      @default(0)

  user     User      @relation(fields: [user_id], references: [id], name: "user_posts")
  topic    Topic     @relation(fields: [topic_id], references: [topic_id], name: "topic_posts", onDelete: Cascade)
  comments Comment[] @relation("post_comments")
}

model Comment {
  comment_id Int      @id @default(autoincrement())
  user_id    Int
  post_id    Int
  content    String
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], name: "user_comments")
  post Post @relation(fields: [post_id], references: [post_id], name: "post_comments", onDelete: Cascade)
}

model Chat {
  chat_id    Int      @id @default(autoincrement())
  user1_id   Int
  user2_id   Int
  created_at DateTime @default(now())

  participant1 User      @relation("chats_user1", fields: [user1_id], references: [id])
  participant2 User      @relation("chats_user2", fields: [user2_id], references: [id])
  chatMessages Message[]
}

model Message {
  message_id Int      @id @default(autoincrement())
  chat_id    Int
  sender_id  Int
  content    String
  created_at DateTime @default(now())

  chat   Chat @relation(fields: [chat_id], references: [chat_id])
  sender User @relation(fields: [sender_id], references: [id])
}

model Follow {
  follow_id        Int      @id @default(autoincrement())
  follower_id      Int
  followed_user_id Int
  created_at       DateTime @default(now())

  follower     User @relation("follower", fields: [follower_id], references: [id])
  followedUser User @relation("followedUser", fields: [followed_user_id], references: [id])
}

model Topic {
  topic_id   Int      @id @default(autoincrement())
  title       String   @unique
  created_at DateTime @default(now())
  image String?
  description String?
  user_id Int
  post_id Int?
  users User @relation(fields: [user_id], references: [id], name: "user_topics")
  posts Post[] @relation("topic_posts")
}
